<?php

$finder = PhpCsFixer\Finder::create()
    ->in(__DIR__);

$config = new PhpCsFixer\Config();

$riskyRules = [
    'non_printable_character',
    'psr_autoloading',
    'modernize_types_casting',
    'self_accessor',
    'static_lambda',
    'use_arrow_functions',
    'get_class_to_class_keyword',
    'is_null',
    'no_homoglyph_names',
    'declare_strict_types',
    'strict_comparison',
    'strict_param',
];

return $config->setRules(
    [
        '@PSR12' => true,
        'strict_param' => true,
        'array_syntax' => ['syntax' => 'short'],
        'ereg_to_preg',
        'mb_str_functions',
        'modernize_strpos',
        'no_alias_language_construct_call',
        'no_mixed_echo_print' => ['use' => 'print'],
        'set_type_to_cast',
        'no_multiline_whitespace_around_double_arrow',
        'no_trailing_comma_in_singleline',
        'no_whitespace_before_comma_in_array',
        'normalize_index_brace',
        'trim_array_spaces',
        'whitespace_after_comma_in_array' => ['ensure_single_space' => true],
        'braces' => [
            'position_after_functions_and_oop_constructs' => 'next',
            'position_after_control_structures' => 'next',
            'position_after_anonymous_constructs' => 'same',
            'allow_single_line_closure' => false,
            'allow_single_line_anonymous_class_with_empty_body' => true,
        ],
        'curly_braces_position' => [
            'control_structures_opening_brace' => 'next_line_unless_newline_at_signature_end',
            'functions_opening_brace' => 'next_line_unless_newline_at_signature_end',
            'anonymous_functions_opening_brace' => 'same_line',
            'classes_opening_brace' => 'next_line_unless_newline_at_signature_end',
            'anonymous_classes_opening_brace' => 'same_line',
            'allow_single_line_empty_anonymous_classes' => true,
            'allow_single_line_anonymous_functions' => true,
        ],
        'no_multiple_statements_per_line',
        'no_trailing_comma_in_singleline' => ['arguments', 'array_destructuring', 'array', 'group_import'],
        'octal_notation',
        'class_reference_name_casing',
        'constant_case' => ['case' => 'lower'],
        'integer_literal_case',
        'lowercase_keywords',
        'lowercase_static_reference',
        'magic_constant_casing',
        'magic_method_casing',
        'native_function_casing',
        'native_function_type_declaration_casing',
        'cast_spaces' => ['space' => 'single'],
        'lowercase_cast',
        'no_short_bool_cast',
        'no_unset_cast',
        'short_scalar_cast',
        'class_attributes_separation' => [
            'elements' => [
                'const' => 'only_if_meta',
                'property' => 'only_if_meta',
                'method' => 'one',
                'trait_import' => 'none',
                'case' => 'none',
            ],
        ],
        'class_definition' => [
            'multi_line_extends_each_single_line' => false,
            'single_item_single_line' => true,
            'single_line' => true,
            'space_before_parenthesis' => true,
            'inline_constructor_arguments' => false,
        ],
        'no_blank_lines_after_class_opening',
        'no_null_property_initialization',
        'ordered_class_elements',
        'self_static_accessor',
        'single_class_element_per_statement',
        'visibility_required',
        'single_trait_insert_per_statement',
        'multiline_comment_opening_closing',
        'no_empty_comment',
        'no_trailing_whitespace_in_comment',
        'single_line_comment_spacing',
        'single_line_comment_style',
        'control_structure_braces',
        'control_structure_continuation_position' => ['position' => 'same_line'],
        'elseif',
        'empty_loop_condition' => ['style' => 'while'],
        'include',
        'no_alternative_syntax',
        'no_break_comment',
        'no_superfluous_elseif',
        'no_unneeded_curly_braces',
        'no_useless_else',
        'simplified_if_return',
        'switch_case_semicolon_to_colon',
        'switch_case_space',
        'switch_continue_to_break',
        'trailing_comma_in_multiline' => ['arrays'],
        'function_declaration',
        'function_typehint_space',
        'lambda_not_used_import',
        'method_argument_space',
        'no_spaces_after_function_name',
        'nullable_type_declaration_for_default_null_value',
        'return_type_declaration',
        'use_arrow_functions',
        'fully_qualified_strict_types',
        'global_namespace_import',
        'no_leading_import_slash',
        'no_unneeded_import_alias',
        'no_unused_imports',
        'ordered_imports',
        'single_import_per_statement',
        'single_line_after_imports',
        'combine_consecutive_issets',
        'combine_consecutive_unsets',
        'declare_equal_normalize' => ['space' => 'none'],
        'declare_parentheses',
        'explicit_indirect_variable',
        'single_space_after_construct',
        'list_syntax',
        'blank_line_after_namespace',
        'clean_namespace',
        'no_leading_namespace_whitespace',
        'single_blank_line_before_namespace',
        'binary_operator_spaces',
        'concat_space' => ['spacing' => 'none'],
        'new_with_braces' => [
            'named_class' => true,
            'anonymous_class' => true,
        ],
        'no_space_around_double_colon',
        'juggle_simple_strings',
        'no_useless_nullsafe_operator',
        'object_operator_without_whitespace',
        'operator_linebreak' => [
            'position' => 'end',
        ],
        'standardize_not_equals',
        'ternary_operator_spaces',
        'ternary_to_null_coalescing',
        'unary_operator_spaces',
        'blank_line_after_opening_tag',
        'full_opening_tag',
        'linebreak_after_opening_tag',
        'no_closing_tag',
        'php_unit_method_casing' => ['case' => 'snake_case'],
        'align_multiline_comment' => ['comment_type' => 'all_multiline'],
        'no_blank_lines_after_phpdoc',
        'no_empty_phpdoc',
        'no_superfluous_phpdoc_tags' => [
            'allow_mixed' => true,
            'allow_unused_params' => true,
        ],
        'phpdoc_align' => [
            'align' => 'left',
            'tags' => [
                'param',
                'property',
                'property-read',
                'property-write',
                'return',
                'throws',
                'type',
                'var',
                'method',
            ],
        ],
        'phpdoc_indent',
        'phpdoc_line_span' => [
            'property' => 'single',
            'method' => 'multi',
            'const' => 'single',
        ],
        'phpdoc_no_empty_return',
        'phpdoc_no_useless_inheritdoc',
        'phpdoc_order' => ['order' => ['param', 'return', 'throws']],
        'phpdoc_scalar',
        'phpdoc_single_line_var_spacing',
        'phpdoc_to_comment',
        'phpdoc_trim_consecutive_blank_line_separation',
        'phpdoc_trim',
        'phpdoc_types',
        'phpdoc_var_annotation_correct_order',
        'no_useless_return',
        'simplified_null_return',
        'multiline_whitespace_before_semicolons' => ['strategy' => 'no_multi_line'],
        'no_empty_statement',
        'no_singleline_whitespace_before_semicolons',
        'semicolon_after_instruction',
        'space_after_semicolon',
        'explicit_string_variable',
        'simple_to_complex_string_variable',
        'single_quote',
        'array_indentation',
        'blank_line_before_statement' => ['statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try']],
        'blank_line_between_import_groups',
        'compact_nullable_typehint',
        'line_ending',
        'method_chaining_indentation',
        'no_extra_blank_lines',
        'no_spaces_around_offset',
        'no_spaces_inside_parenthesis',
        'no_trailing_whitespace',
        'no_whitespace_in_blank_line',
        'single_blank_line_at_eof',
        'statement_indentation',
        'types_spaces',
    ]
)
    ->setFinder($finder);
